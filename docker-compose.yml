services:
  frontend:
    build: 
      context: ./
      dockerfile: ./frontend/Dockerfile
    volumes:
      - ./frontend/dist:/app/dist
    env_file: .env
    command: sh -c "npm install && npm run build && /bin/bash"
    tty: true
    # command: /bin/bash
    restart: no

  user:
    build: 
      context: ./backend
      dockerfile: services/user/Dockerfile
    ports:
      - "${USER_SERVICE_PORT}:4001"
      - "9231:9231"
    volumes:
      - ./backend/db:/app/db
    restart: always
    networks:
      - app-network
    env_file: .env

  game:
    build:
      context: ./
      dockerfile: ./backend/services/game/Dockerfile
    ports:
      - "${GAME_SERVICE_PORT}:4002"
      - "9232:9232"
    volumes:
      - ./backend/db:/app/db
    restart: always
    networks:
      - app-network
    env_file: .env

  matchmaking:
    build:
      context: ./backend
      dockerfile: services/matchmaking/Dockerfile
    ports:
    - "${MATCHMAKING_SERVICE_PORT}:4003"
    - "9229:9229"
    volumes:
      - ./backend/db:/app/db
    restart: always
    networks:
    - app-network
    env_file: .env

  caddy:
    image: caddy:latest
    ports:
      - "0.0.0.0:8080:80"
      - "0.0.0.0:8443:8443"
      - "0.0.0.0:2019:2019"
      # - "${FRONTEND_PORT}"
      # - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
      # - "${GAME_SERVICE_PORT}:${GAME_SERVICE_PORT}"
      # - "${MATCHMAKING_SERVICE_PORT}:${MATCHMAKING_SERVICE_PORT}"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data #Persist certificates
      - caddy_config:/config #Persist caddy config
      - ./frontend/dist:/usr/share/caddy/frontend:ro
    networks:
      - app-network
    depends_on:
      - user
      - game
      - matchmaking
    restart: always
  
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=15d'
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring:/etc/prometheus:ro

    ports:
      - "9090:9090"
    networks:
      - app-network
    depends_on:
      - user
      - game
      - matchmaking
  node-exporter:
   image: prom/node-exporter:latest
   restart: always
   pid: host
   networks:
      - app-network
   command:
      - '--path.rootfs=/host'
   volumes:
      - /:/host:ro,rslave

  grafana:
    image: grafana/grafana-oss:latest
    restart: always
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PWD}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - app-network
    depends_on:
      - prometheus
  
   

volumes:
  caddy_data:
  caddy_config:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge
