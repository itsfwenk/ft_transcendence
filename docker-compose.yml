services:
  # frontend:
  #   build: 
  #     context: ./
  #     dockerfile: ./frontend/Dockerfile
  #   volumes:
  #     - ./frontend/dist:/app/dist
  #   env_file: .env
  #   command: sh -c "npm install && npm run build && /bin/bash"
  #   tty: true
  #   # command: /bin/bash
  #   restart: no

  user:
    build: 
      context: ./backend
      dockerfile: services/user/Dockerfile
    ports:
      - "${USER_SERVICE_PORT}:4001"
    volumes:
      - user_db:/app/db
    restart: always
    networks:
      - app-network
    env_file: .env

  game:
    build:
      context: ./
      dockerfile: ./backend/services/game/Dockerfile
    ports:
      - "${GAME_SERVICE_PORT}:4002"
    volumes:
      - game_db:/app/db
    restart: always
    networks:
      - app-network
    env_file: .env

  matchmaking:
    build:
      context: ./backend
      dockerfile: services/matchmaking/Dockerfile
    ports:
    - "${MATCHMAKING_SERVICE_PORT}:4003"
    volumes:
      - matchmaking_db:/app/db
    restart: always
    networks:
    - app-network
    env_file: .env

  caddy:
    build:
      context: ./
      dockerfile: ./backend/caddy/Dockerfile
    ports:
      - "0.0.0.0:8080:80"
      - "0.0.0.0:8443:8443"
      - "0.0.0.0:2019:2019"
      # - "${FRONTEND_PORT}"
      # - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
      # - "${GAME_SERVICE_PORT}:${GAME_SERVICE_PORT}"
      # - "${MATCHMAKING_SERVICE_PORT}:${MATCHMAKING_SERVICE_PORT}"
    volumes:
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - app-network
    depends_on:
      - user
      - game
      - matchmaking
    restart: always
  
  prometheus:
    build:
      context: ./monitoring
      dockerfile: prometheus/Dockerfile
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=15d'
    volumes:
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - app-network
    depends_on:
      - user
      - game
      - matchmaking
  node-exporter:
   image: prom/node-exporter:latest
   restart: always
   pid: host
   networks:
      - app-network
  #  command:
  #     - '--path.rootfs=/host'
  #  volumes:
  #     - /:/host:ro, rslave         #remettre ',rslave' lorsqu'on est pas sur mac

  grafana:
    build:
      context: ./monitoring
      dockerfile: grafana/Dockerfile
    restart: always
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PWD}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app-network
    depends_on:
      - prometheus
  
volumes:
  user_db:
  game_db:
  matchmaking_db:
  caddy_data:
  caddy_config:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge
