services:
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #     target: ${FRONTEND_TARGET}
  #   ports:
  #     - "${FRONTEND_PORT}"
  #     - "5173:5173" # dev
  #   networks:
  #     - app-network
  #   volumes: 
  #     - ${FRONTEND_VOLUMES}
  #   working_dir: ${FRONTEND_WORKDIR}
  #   restart: always
  #   env_file: .env.production

  user:
    build: 
      context: ./backend
      dockerfile: services/user/Dockerfile
    ports:
      - "${USER_SERVICE_PORT}:4001"
      - "9231:9231"
    volumes:
      - ./backend/db:/app/db
    restart: always
    networks:
      - app-network
    env_file: .env.production

  game:
    build:
      context: ./backend
      dockerfile: services/game/Dockerfile
    ports:
      - "${GAME_SERVICE_PORT}:4002"
      - "9232:9232"
    volumes:
      - ./backend/db:/app/db
    restart: always
    networks:
      - app-network
    env_file: .env.production

  matchmaking:
    build:
      context: ./backend
      dockerfile: services/matchmaking/Dockerfile
    ports:
    - "${MATCHMAKING_SERVICE_PORT}:4003"
    - "9229:9229"
    volumes:
      - ./backend/db:/app/db
    restart: always
    networks:
    - app-network
    env_file: .env.production

  # gateway:
  #   build:
  #     context: ./backend
  #     dockerfile: gateway/Dockerfile
  #   ports:
  #     - "${GATEWAY_SERVICE_PORT}:4000"
  #     - "9230:9230"
  #   depends_on:
  #     - user
  #     - game
  #     - matchmaking
  #   networks:
  #     - app-network
  #   env_file: .env.production
  caddy:
    image: caddy:latest
    ports:
      - "8080:80"
      - "8443:8443"
      # - "${FRONTEND_PORT}"
      # - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
      # - "${GAME_SERVICE_PORT}:${GAME_SERVICE_PORT}"
      # - "${MATCHMAKING_SERVICE_PORT}:${MATCHMAKING_SERVICE_PORT}"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data #Persist certificates
      - caddy_config:/config #Persist caddy config
      - ./frontend/dist:/usr/share/caddy/frontend:ro
    networks:
      - app-network
    depends_on:
      - user
      - game
      - matchmaking
      # - frontend
    restart: always

volumes:
  caddy_data:
  caddy_config:

networks:
  app-network:
    driver: bridge
