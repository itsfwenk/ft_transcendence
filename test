// src/backend/services/game/srcs/gameController.ts

import { FastifyRequest } from 'fastify';
import { WebSocket } from "ws";
import jwt, { JwtPayload } from 'jsonwebtoken';
import activeUsers from './gameRoutes.js';
import { getUserById, updatePaddleDelta, getGamebyId, updateGameStatus } from './gameDb.js'; // Import updateGameStatus

const paddleSpeed = parseInt(process.env.PADDLE_SPEED as string, 10);
const gameReadyPlayers = new Map<string, Set<string>>(); // gameId -> Set of userIds who are ready
const gameIntervals = new Map<string, NodeJS.Timeout>(); // To store game update intervals

// ... (other imports and constants) ...

export async function websocketHandshake(connection: WebSocket, req: FastifyRequest) {
    console.log('websocketHandshake called');

    const token = req.cookies["authToken"] as string;
    console.log("Auth Token:", token);

    const decoded = websocketAuthMiddleware(token);
    if (!decoded) {
        console.error('Error in websocketAuthMiddleware');
        connection.close(1003, 'Invalid message format');
        return;
    }
    const { userId } = decoded;
    const user = await getUserById(userId);

    if (!user || !user.inGameId) {
        console.error(`User with ID ${userId} not found or not in a game`);
        connection.close(1000, 'Going away');
        return;
    }
    const gameId = user.inGameId;

    activeUsers.set(userId, connection);
    console.log(`User ${userId} connected to game ${gameId}`);

    // Initialize ready players set for this game if it doesn't exist
    if (!gameReadyPlayers.has(gameId)) {
        gameReadyPlayers.set(String(gameId), new Set());
    }

    connection.on('message', async (message) => {
        try {
            const parsedMessage = JSON.parse(message.toString());
            const { type, key, state } = parsedMessage;

            if (type === 'ready_to_start') {
                console.log(`User ${userId} is ready to start game ${gameId}`);
                const readyPlayers = gameReadyPlayers.get(gameId)!;
                readyPlayers.add(userId);

                const game = await getGamebyId(gameId);
                if (game && readyPlayers.size === 2 && game.status !== 'playing') {
                    console.log(`Both players ready for game ${gameId}. Starting game.`);
                    await updateGameStatus(gameId, 'playing');
                    // Notify both players to start
                    for (const playerId of [game.player1_id, game.player2_id]) {
                        const playerSocket = activeUsers.get(playerId);
                        playerSocket?.send(JSON.stringify({ type: 'game_start' }));
                    }
                    // Start the game update interval for this game
                    if (!gameIntervals.has(gameId)) {
                        const intervalId = setInterval(() => updateGamesForGame(gameId), 1000 / 60); // 60 FPS
                        gameIntervals.set(gameId, intervalId);
                    }
                }
            } else if (type === 'input' && key) {
                const delta = (key === 'ArrowUp') ? -paddleSpeed : (key === 'ArrowDown') ? paddleSpeed : 0;
                updatePaddleDelta(gameId, userId, state === 'keydown' ? delta : 0);
            }
        } catch (err) {
            console.error("Error processing WebSocket message:", err);
            connection.close(1003, 'Invalid message format');
        }
    });

    connection.on('close', () => {
        activeUsers.delete(userId);
        const readyPlayers = gameReadyPlayers.get(gameId);
        readyPlayers?.delete(userId);
        console.log(`User ${userId} disconnected from game ${gameId}`);
        // Optionally clear the interval if all users disconnect?
        if (activeUsers.size === 0 && gameIntervals.has(gameId)) {
            clearInterval(gameIntervals.get(gameId));
            gameIntervals.delete(gameId);
        }
    });

    connection.on('error', (err: Error) => {
        console.error('WebSocket error:', err.message);
        connection.close(1003, 'Invalid message format');
    });
}

async function broadcastGameToPlayers(gameId: string) {
    const game = await getGamebyId(gameId);
    if (!game || game.status !== 'playing') return; // Only broadcast if game is playing

    [game.player1_id, game.player2_id].forEach(userId => {
        const socket = activeUsers.get(userId);
        if (socket) {
            socket.send(JSON.stringify(game));
        }
    });
}

async function updateGamesForGame(gameId: string) {
    try {
        const game = await getGamebyId(gameId);
        if (game && game.status === 'playing') {
            await updateBallPosition(gameId);
            await updatePaddlesInDb(gameId);
            await broadcastGameToPlayers(gameId);
        } else if (game && game.status === 'finished' && gameIntervals.has(gameId)) {
            clearInterval(gameIntervals.get(gameId));
            gameIntervals.delete(gameId);
            // Optionally send a final 'game_finished' message to clients
            const finalGame = await getGamebyId(gameId);
            if (finalGame) {
                for (const playerId of [finalGame.player1_id, finalGame.player2_id]) {
                    const playerSocket = activeUsers.get(playerId);
                    playerSocket?.send(JSON.stringify({ type: 'game_finished', gameState: finalGame }));
                }
            }
        }
    } catch (error) {
        console.error(`Error updating game ${gameId}:`, error);
    }
}

// You'll need to import or define this function in gameDb.ts
// async function updateGameStatus(gameId: string, status: 'waiting' | 'playing' | 'finished') {
//     // Implementation to update the game status in your database
// }

// You might want to adjust your main updateGames function to not run continuously for all games
// but rather be triggered per game session when it starts.
// export async function updateGames() { ... }